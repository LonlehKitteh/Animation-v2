@import "./variables.scss";
@import "./mixins.scss";
@import "./keyframes.scss";

#animacja1,
#animacja2 {
    flex-grow: 1;
    cursor: pointer;
    margin: 1rem;
    padding: 0.5rem 1rem;
    font-size: 1.4rem;
    text-transform: uppercase;
    position: relative;
    z-index: 2;
    text-align: center;
    border: 1px solid $btn-primary-hover;
    border-radius: 1rem;
    overflow: hidden;
    &::after {
        content: "";
        width: 0;
        height: 100%;
        position: absolute;
        top: 0;
        left: 0;
        z-index: -1;
        background: $btn-primary-hover;
    }
}

#animacja1 {
    transition: 1s ease-in-out;
    &::after {
        transition: 1s ease-in-out;
    }
    &:hover:after {
        width: 100%;
    }
    &:hover {
        color: $nav-color;
    }
}

#animacja2 {
    &:hover {
        animation: hoverMe-1 1s ease-in-out forwards;
    }
    &:hover::after {
        animation: hoverMe-2 1s ease-in-out forwards;
    }
}
.flex {
    @include flex-center;
}
.flex-child {
    flex-basis: 50%;
    padding: 1rem;
    &:last-of-type {
        border-left: 1px solid $menu-border;
    }
}
.example-flow-animation,
.example-static-animation {
    margin-bottom: 1rem;
    height: 4rem;
    background: $css-track;
    padding: 0.5rem;
    box-shadow: 0 0 2px 1px $css-track;
    cursor: pointer;
    div {
        position: relative;
        width: 25%;
        height: 100%;
        background: $css-track-div;
        box-shadow: 0 0 2px 1px $css-track-div;
        will-change: background, width, transform;
        animation: example-flow-animation 2s infinite both;
        &::after {
            content: "DIV";
            position: absolute;
            color: $css-track-div-color;
            font-size: 1.5rem;
            font-weight: bolder;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }
    }
}

.example-static-animation {
    display: flex;
    gap: 0.5rem;
    justify-content: flex-start;
    will-change: cursor, justify-content;
    animation: example-static-animation 2s infinite;
    div {
        will-change: cursor, justify-content;
        animation: example-static-animation 2s infinite;
    }
}
.begin h1 {
    margin: -2rem;
    font-family: monospace, "Cairo";
    margin-bottom: 2rem;
    color: white !important;
    background-color: $btn-primary-hover;
    padding: 2rem !important;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 2.6rem;
    text-transform: uppercase;
    user-select: none;
    text-shadow: none !important;
}
.twoButtons {
    display: flex;
    justify-content: space-around;
    div {
        flex-grow: 1;
    }
}

$time: 5s;
.animation-3d {
    $size: 150px;
    width: $size;
    height: $size;
    perspective: 900px;
    margin: 10rem auto;
    .box {
        transform-style: preserve-3d;
        transform: rotateX(-30deg) rotateY(-45deg);
        animation: fullRotation $time 1s ease-in-out infinite;
        .cube {
            width: $size / 3;
            height: $size / 3;
            position: absolute;
            transform-style: preserve-3d;
            .cube__face {
                position: absolute;
                width: $size / 3;
                height: $size / 3;
                background: inherit;
                box-shadow: 0 0 0.5 * $size / 3 rgba(gainsboro, 0.5) inset;
                backface-visibility: hidden;
                background: #ff7f50;
                border: 1px solid #ff7f50;

                $rotates: 0, 90, 180, -90, 90, -90;
                $counter: 1;
                @each $rotate in $rotates {
                    &:nth-child(#{$counter}) {
                        @if $counter > 4 {
                            transform: rotateX($rotate + deg) translateZ($size / 6);
                        } @else {
                            transform: rotateY($rotate + deg) translateZ($size / 6);
                        }
                        $counter: $counter + 1;
                    }
                }
            }
        }
    }
    $jump: 0;
    $counter: 0;
    @for $z from 0 to 3 {
        @for $i from 0 to 9 {
            .cube#{$counter} {
                transform: translate3d($size / 3 * ($i%3), $size / 3 * ($jump % 3), $size / 3 * $z);
                animation: test#{$counter} $time infinite;
            }
            @if ($i + 1) % 3 == 0 {
                $jump: $jump + 1;
            }
            $counter: $counter + 1;
        }
    }
}

.cube0,
.cube2,
.cube18,
.cube20 {
    .cube__face {
        animation: pulse $time ease-in-out infinite both;
    }
}